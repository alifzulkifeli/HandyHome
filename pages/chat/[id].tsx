'use client'

import { useState, useEffect, useRef } from 'react'
import { Send } from 'lucide-react'
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { useParams } from 'next/navigation'
import Page from '@/components/page'
import Section from '@/components/section'
import { pb } from '@/lib/pb' // Replace with your PocketBase import

type Message = {
    id: string
    message_text: string
    senderId: string
    recipientId: string
    timestamp: string
}

export default function ChatDetails() {
    const [messages, setMessages] = useState<any[]>([])
    const [newMessage, setNewMessage] = useState('')
    const scrollAreaRef = useRef<HTMLDivElement>(null)
    const lastMessageRef = useRef<HTMLDivElement>(null)

    const params = useParams()
    const userChatname: any = params?.id ?? 'Chat' // Recipient ID
    const currentUserId = 'sbptzw4sjouas1a' // Replace with actual current user ID

    const scrollToBottom = () => {
        lastMessageRef.current?.scrollIntoView({ behavior: 'instant' })
    }

    // Fetch initial messages
    useEffect(() => {
        const fetchMessages = async () => {
            if (userChatname !== 'Chat') {
                try {
                    const fetchedMessages = await pb.collection('Messages').getFullList<Message>({
                        filter: `(senderId="${currentUserId}" && recipientId="${userChatname}") || (senderId="${userChatname}" && recipientId="${currentUserId}")`,
                        sort: 'created',
                    })
                    setMessages(fetchedMessages)
                    console.log(fetchedMessages);
                    
                } catch (error) {
                    console.log('Error fetching messages:', error)
                }
            }
        }

        fetchMessages()
    }, [userChatname, currentUserId])

    // Subscribe to new messages
    useEffect(() => {
        const subscribeToMessages = async () => {
            if (userChatname !== 'Chat') {
                try {
                    const unsubscribe = pb.collection('Messages').subscribe('*', (e) => {
                        if (e.action === 'create') {
                            const newMessage = e.record

                            if (
                                (newMessage.senderId === currentUserId && newMessage.recipientId === userChatname) ||
                                (newMessage.senderId === userChatname && newMessage.recipientId === currentUserId)
                            ) {
                                setMessages((prevMessages) => {
                                    // Avoid adding duplicate messages
                                    if (!prevMessages.some((msg) => msg.id === newMessage.id)) {
                                        return [...prevMessages, newMessage]
                                    }
                                    return prevMessages
                                })
                            }
                        }
                    })

                    return () => pb.collection('example').unsubscribe('*'); // U
                } catch (error) {
                    console.log('Error subscribing to messages:', error)
                }
            }
        }

        subscribeToMessages()
    }, [userChatname, currentUserId])

    useEffect(() => {
        const timer = setTimeout(() => {
            scrollToBottom();
        }, 100); // Debounce for smoother UI
        return () => clearTimeout(timer);
    }, [messages]);
    

    const handleSendMessage = async () => {
        if (newMessage.trim() === '') return

        const messageData: Message = {
            id: '', // Will be generated by the database
            message_text: newMessage,
            senderId: currentUserId,
            recipientId: userChatname,
            timestamp: new Date().toISOString(),
        }

        try {
            const savedMessage = await pb.collection('Messages').create(messageData)
            // setMessages((prevMessages) => [...prevMessages, savedMessage])
            setNewMessage('')
        } catch (error) {
            console.log('Error sending message:', error)
        }
    }

    return (
        <div className="">
            <Page padding={0} nav={false}>
                <Section>
                    <div className="flex flex-col h-[84vh] bg-background">
                        <ScrollArea className="flex-grow p-4 h-full" ref={scrollAreaRef}>
                            <div className="mx-auto">
                                {messages.map((message, index) => (
                                    <div
                                        key={index}
                                        className={`flex ${message.senderId === currentUserId ? 'justify-end' : 'justify-start'} mb-4`}
                                        ref={index === messages.length - 1 ? lastMessageRef : null}
                                    >
                                        <div
                                            className={`flex items-start max-w-[80%] ${message.senderId === currentUserId ? 'flex-row-reverse' : 'flex-row'}`}
                                        >
                                            <Avatar className="w-8 h-8">
                                                <AvatarFallback>
                                                    {message.senderId === currentUserId ? 'U' : 'R'}
                                                </AvatarFallback>
                                                <AvatarImage
                                                    src={
                                                        message.senderId === currentUserId
                                                            ? '/user-avatar.png'
                                                            : '/recipient-avatar.png'
                                                    }
                                                />
                                            </Avatar>
                                            <div
                                                className={`mx-2 p-3 rounded-lg ${message.senderId === currentUserId
                                                        ? 'bg-primary text-primary-foreground'
                                                        : 'bg-secondary text-secondary-foreground'
                                                    }`}
                                            >
                                                {message.message_text}
                                            </div>
                                        </div>
                                    </div>
                                ))}
                            </div>
                        </ScrollArea>
                        <div className="p-4 bg-background border-t">
                            <div className="max-w-2xl mx-auto">
                                <form
                                    onSubmit={(e) => {
                                        e.preventDefault()
                                        handleSendMessage()
                                    }}
                                    className="flex space-x-2"
                                >
                                    <Input
                                        type="text"
                                        placeholder="Type your message..."
                                        value={newMessage}
                                        onChange={(e) => setNewMessage(e.target.value)}
                                        className="flex-grow"
                                    />
                                    <Button type="submit" size="icon">
                                        <Send className="h-4 w-4" />
                                        <span className="sr-only">Send</span>
                                    </Button>
                                </form>
                            </div>
                        </div>
                    </div>
                </Section>
            </Page>
        </div>
    )
}
